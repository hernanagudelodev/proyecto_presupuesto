"""Create recurring rules table

Revision ID: 6eb6fd08e9e8
Revises: 
Create Date: 2025-09-18 10:32:05.639293

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '6eb6fd08e9e8'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('reglas_recurrentes',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('descripcion', sa.String(), nullable=False),
    sa.Column('valor_predeterminado', sa.Float(), nullable=False),
    sa.Column('tipo', sa.String(), nullable=False),
    sa.Column('frecuencia', sa.String(), nullable=False),
    sa.Column('dia', sa.Integer(), nullable=True),
    sa.Column('categoria_predeterminada_id', sa.Integer(), nullable=True),
    sa.Column('usuario_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['categoria_predeterminada_id'], ['categorias.id'], ),
    sa.ForeignKeyConstraint(['usuario_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_reglas_recurrentes_id'), 'reglas_recurrentes', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_reglas_recurrentes_id'), table_name='reglas_recurrentes')
    op.drop_table('reglas_recurrentes')
    # ### end Alembic commands ###
